{"version":3,"sources":["../../../api/server/services/BookService.js"],"names":["BookService","database","Book","findAll","newBook","create","id","updateBook","findOne","where","Number","bookToUpdate","update","theBook","bookToDelete","destroy","deletedBook"],"mappings":";;;;;;;;;;;;;;;AAAA;;IAEMA,W;;;;;;;;;;;;;;;;mDAGmBC,mBAASC,IAAT,CAAcC,OAAd,E;;;;;;;;;;;;;;;;;;;4BAMAC,O;;;;;;;mDAEAH,mBAASC,IAAT,CAAcG,MAAd,CAAqBD,OAArB,C;;;;;;;;;;;;;;;;;;;+BAMGE,E,EAAIC,W;;;;;;;;mDAEON,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAC7CC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADsC,eAAtB,C;;;AAArBK,cAAAA,Y;;mBAIFA,Y;;;;;;mDACMV,mBAASC,IAAT,CAAcU,MAAd,CAAqBL,WAArB,EAAiC;AAAEE,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,eAAjC,C;;;gDAECC,W;;;gDAEJ,I;;;;;;;;;;;;;;;;6BAMOD,E;;;;;;;;mDAEQL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AACxCC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADiC,eAAtB,C;;;AAAhBO,cAAAA,O;gDAICA,O;;;;;;;;;;;;;;;;+BAMSP,E;;;;;;;;mDAEWL,mBAASC,IAAT,CAAcM,OAAd,CAAsB;AAAEC,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AAAT,eAAtB,C;;;AAArBQ,cAAAA,Y;;mBAEFA,Y;;;;;;mDAC0Bb,mBAASC,IAAT,CAAca,OAAd,CAAsB;AAC5CN,gBAAAA,KAAK,EAAE;AAAEH,kBAAAA,EAAE,EAAEI,MAAM,CAACJ,EAAD;AAAZ;AADqC,eAAtB,C;;;AAApBU,cAAAA,W;gDAGCA,W;;;gDAEJ,I;;;;;;;;;;;;;;;;;;eAOJhB,W","sourcesContent":["import database from '../src/models';\n\nclass BookService {\n    static async getAllBooks() {\n        try {\n            return await database.Book.findAll();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async addBook(newBook) {\n        try {\n            return await database.Book.create(newBook);\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async updateBook(id, updateBook) {\n        try {\n            const bookToUpdate = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n\n            if (bookToUpdate) {\n                await database.Book.update(updateBook, { where: { id: Number(id) } });\n\n                return updateBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async getABook(id) {\n        try {\n            const theBook = await database.Book.findOne({\n                where: { id: Number(id) }\n            });\n\n            return theBook;\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    static async deleteBook(id) {\n        try {\n            const bookToDelete = await database.Book.findOne({ where: { id: Number(id) } });\n\n            if (bookToDelete) {\n                const deletedBook = await database.Book.destroy({\n                    where: { id: Number(id) }\n                });\n                return deletedBook;\n            }\n            return null;\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport default BookService;"],"file":"BookService.js"}